<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据库系统概论</title>
      <link href="/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/"/>
      <url>/2022/01/05/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><h2 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h2><h3 id="数据库基本概念"><a href="#数据库基本概念" class="headerlink" title="数据库基本概念"></a>数据库基本概念</h3><p><code>一、数据(data)</code>:</p><p>　　描述事物的符号记录,可以是数字,文字,图形,图像,音频,视频等</p><p>　　数据的含义称为数据的语义,数据与其语义是不可分的.</p><p><code>二、数据库(Data Base,DB)</code></p><p>　　数据库是长期存储在计算机内, 有组织的, 可共享的大量数据的集合.</p><p>　　数据库中的数据按照一定的数据模型组织,描述和存储,具有<code>较小的冗余度</code>, <code>较高的数据独立性</code>和<code>易拓展性</code>,并可为各种用户共享.</p><p>　　数据库基本特点:</p><ul><li>永久存储</li><li>有组织</li><li>可共享</li></ul><p><code>三、数据库管理系统(Data Base Management System,DBMS)</code></p><p>　　数据库管理系统是位于用户和操作系统之间的一层数据管理软件,与操作系统一样是计算机的基础软件,也是一个大型复杂的软件系统.</p><p>　　<code>主要功能:</code></p><ul><li>数据定义功能:</li></ul><p>　　数据库管理系统提供<code>数据定义语言(Data Definition Language,DDL)</code>,用户通过其可以对数据库中的数据对象的组成与结构进行定义.</p><ul><li>数据组织, 存储和管理:</li></ul><p>　　数据库管理系统要分类组织, 存储, 和管理各种数据.数据组织和存储的基本目标是提高存储空间利用率和方便存取,提供多种存取方式.</p><ul><li>数据操作功能:</li></ul><p>　　数据库管理系统还提供<code>数据操作语言(Data Manipulation Language,DML)</code>,用来操作数据,实现对数据库的基本操作(查询,插入,删除和修改).</p><ul><li>数据库的事务管理和运行管理:</li></ul><p>　　数据库在建立, 运用和维护是由数据库管理系统统一管理和控制,以确保事务的正确运行,保证数据的安全性, 完整性, 多用户对数据的 并发使用 以及发生故障后的系统恢复.</p><ul><li>数据库的建立和维护功能:</li><li>其他:</li></ul><p><code>四、数据库系统(DataBase System,DBS)</code></p><p>　　数据库系统是由<code>&quot;数据库&quot;</code>,<code>&quot;数据库管理系统&quot;</code>,<code>&quot;应用程序&quot;</code>和<code>&quot;数据库管理员(DataBase ADministrator,DBA)&quot;</code>组成的存储、管理、处理和维护数据的系统.</p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E5%BA%93/Snipaste_2022-01-05_20-43-56.png" alt="引用数据库后的计算机系统"></p><h3 id="数据管理技术的产生和发展"><a href="#数据管理技术的产生和发展" class="headerlink" title="数据管理技术的产生和发展"></a>数据管理技术的产生和发展</h3><p><code>一、人工管理阶段</code></p><blockquote><p>特点:</p><ul><li><p>数据不保存</p></li><li><p>应用程序管理数据</p><p>　　数据需要由应用程序自己设计、定义和管理,没有相应的软件系统负责数据的管理工作.应用程序不仅要规定数据的逻辑结构,而且也要设计物理结构((存储结构,存取方法,输入方式等)).</p></li><li><p>数据不共享</p></li><li><p>数据不具有独立性</p><p>　　数据的逻辑结构和物理结构发生变化后,必须对应用程序做相应修改,数据完全依赖于应用程序.</p></li></ul></blockquote><p><code>二、文件系统阶段</code></p><p>　　20世纪50年代后期到60年代中期,硬件方面,有磁盘,磁鼓等直接存取存储设备,软件方面:操作系统中有了文件系统.处理方式上不仅可以批处理,而且能够联机实时处理.</p><blockquote><p>特点:</p><ul><li>数据可以称其保存</li><li>由文件系统管理数据</li></ul><p>缺点:</p><ul><li>数据共享性差,冗余度大</li></ul><p>　　在文件系统中,一个文件基本上对应一个应用程序,即文件仍然是面向应用的,但但不同的应用程序具有部分相同数据时,也必须建立各自的文件,而不能共享相同的数据.</p><ul><li>数据独立性差</li></ul></blockquote><p><code>三、数据库系统阶段</code></p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E5%BA%93/Snipaste_2022-01-06_21-20-35.png"></p><h3 id="数据库系统的特点"><a href="#数据库系统的特点" class="headerlink" title="数据库系统的特点"></a>数据库系统的特点</h3><p><code>一、数据结构化</code></p><p>　　数据库系统实现<code>数据的整体结构化,</code>是数据库的主要特征之一,也是数据库系统与文件系统的本质区别.</p><blockquote><p>整体结构化</p><ul><li><p>不再仅仅针对某一个应用，而是面向整个组织或企业</p></li><li><p>不仅数据内部结构化，而且整体是结构化的，数据之间是具有联系的</p></li><li><p>数据记录可以变长</p></li><li><p>数据的最小存取单位是数据项</p></li></ul></blockquote><p><code>二、数据的共享性高,冗余度低且易扩充</code></p><p>　　数据库系统实现数据面向整个系统而不是某个应用,大大减少数据冗余,节约存储空间;同时(避免了数据之间的不相容性和不一致性).</p><blockquote><p>数据共享的好处</p><ul><li><p>减少数据冗余，节约存储空间</p></li><li><p>避免数据之间的不相容性与不一致性</p><blockquote><p>　　数据不一致性的原因主要有以下三种：一是由于数据冗余造成的；二是由于并发控制不当造成的；三是由于各种故障、错误造成的。</p><p>　　第一种情况的出现往往是由于重复存放的数据未能进行一致性地更新造成的。例如教师工资的调整，如果人事处的工资数据已经改动了，而财务处的工资数据未改变，就会产生矛盾的工资数。</p><p>　　第二种情况是由于多用户共享数据库，而更新操作未能保持同步进行而引起。例如，在飞机票订购系统中，如果不同的两个购票点同时查询某张机票的订购情况，而且分别为顾客订购了这张机票，就会造成一张机票分别卖给两名顾客的情况。这是由于系统没有进行<a href="https://baike.baidu.com/item/%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">并发控制</a>，所以造成了数据的不一致性。</p><p>　　第三种情况下，当由于某种原因（如硬件<a href="https://baike.baidu.com/item/%E6%95%85%E9%9A%9C">故障</a>或软件故障）而造成数据丢失或数据损坏，要根据各种<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%B4%E6%8A%A4">数据库维护</a>手段（如转存、日志等）和<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D">数据恢复</a>措施将<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%81%A2%E5%A4%8D">数据库恢复</a>到某个正确的、完整的、一致性的状态下。</p></blockquote></li><li><p>数据库系统弹性大，使其易于扩充</p></li></ul></blockquote><p><code>三、数据独立性高</code></p><p>　　数据独立性包括物理独立性和逻辑独立性.</p><p>　　<code>物理独立性</code>指用户的应用程序与数据库中数据的物理存储是相互独立的;即数据在数据库中的存储是由数据库管理系统管理的,用户应用程序不需要了解,只需要处理数据的逻辑结构.</p><p>　　<code>逻辑独立性</code>指的是用户的应用程序与数据库的逻辑结构是相互独立的,也就是数据的逻辑结构改变时用户应用程序可以不变.</p><p>　　数据库的独立性是由数据库管理系统的<code>二级映像功能</code>实现保证的.</p><p><code>四、数据由数据库系统统一管理和控制</code></p><p>　　数据库管理系统必须提供一下几方面的数据控制功能</p><ul><li>数据的安全性保护</li></ul><p>　　数据的安全性保护指的是保护数据以防止不合法使用造成的数据泄密和破坏</p><ul><li>数据的完整性检查</li></ul><p>　　数据的完整性值数据的正确性、有效性和相容性,完整性检查将数据控制在有效的范围内,并保证数据之间满足一定的关系.</p><ul><li>并发控制</li></ul><p>　　当多个用户的并发进程同时存取、修改数据库时,可能发生互相干扰而得到错误的结果是的数据库的完整性遭到破坏,因此必须对多用户的并发操作进行控制和协调.</p><ul><li>数据库恢复</li></ul><p>　　数据库管理系统必须具有将数据库从错误状态恢复到某一已知的正确状态(亦称完整状态或一致状态)的功能.</p><h3 id="数据库系统概述总结"><a href="#数据库系统概述总结" class="headerlink" title="数据库系统概述总结"></a>数据库系统概述总结</h3><p>　　数据库是长期存储在计算机内有组织、大量、共享的数据集合.它可以供各种用户共享,具有最小冗余度和较高的数据独立性.数据库管理系统在数据库建立、运用和维护时对数据进行统一控制,以保证数据的完整性和安全性,并在多用户同时使用数据库时进行并发控制,在发生故障后对数据库进行恢复.</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C_数据结构</title>
      <link href="/2021/08/31/C_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2021/08/31/C_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="数据-数据元素-数据项-数据对象"><a href="#数据-数据元素-数据项-数据对象" class="headerlink" title="数据,数据元素,数据项,数据对象"></a>数据,数据元素,数据项,数据对象</h3><p>　　<code>数据</code>: 是客观事物的符号表示,是所有能输入到计算机中并被计算机程序处理的符号的总称.</p><p>　　<code>数据元素</code>:是<em><strong>数据</strong></em>的<em><strong>基本单位</strong></em>,在计算机中通常作为一个整体来处理.如学生管理系统中的一名学生.</p><p>　　<code>数据项</code>:是组成<em><strong>数据元素</strong></em>的,有独立含义的<em><strong>最小单位</strong></em>,如学生管理系统中学生的姓名,学号等基本信息.</p><p>　　<code>数据对象</code>:是性质相同的<em><strong>数据元素</strong></em>的集合,是数据的一个子集.</p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="数据 数据元素 数据项 数据对象"></p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>　　<code>数据结构</code>是相互之间存在一种或多种特定关系的数据元素的集合.数据结构包括<code>逻辑结构</code>和<code>存储结构</code>两个层次.</p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构:"></a>逻辑结构:</h4><p>　　从逻辑关系上描述数据,与数据的存储无关,独立于计算机.可以看作具体问题的数学模型.</p><p>　　逻辑结构的两大要素: <code>数据元素</code>和<code>逻辑关系</code>,根据数据元素之间的关系不同,可以分为以下四种常见基本结构.</p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Snipaste_2021-09-06_13-10-23.png"></p><p>　　其中 <code>集合结构</code>,<code>树结构</code>和<code>图(网)结构</code>都属于非线性结构.</p><p>　　线性结构包括<code>线性表</code>,<code>栈</code>,<code>队列</code>,<code>字符串</code>和<code>数组</code></p><p>　　非线性结构包括<code>数</code>,<code>二叉树</code>,<code>有向图</code>和<code>无向图</code></p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Snipaste_2021-09-06_13-55-12.png"></p><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>　　数据对象在计算机中的存储表示称为数据的存储结构,也称为物理结构,既要存储各数据元素的数据,又要存储它们之间的逻辑关系.数据元素再计算机中又两种基本的存储结构,分别是<code>顺序存储结构</code>和<code>链式存储结构</code>.</p><blockquote><p>顺序存储结构:<br>　　顺序存储结构是借助元素再存储其中的相对位置;来表示数据元素之间的逻辑关系,通常借助程序设计语言的<code>数组类型</code>来描述.    </p><p>链式存储结构:<br>　　链式存储结构无需占用一整块存储空间,但为了表示节点之间的关系,需要给每个节点附加指针字段,用于存放后继元素的存储地址.所以链式存储结构通常借助程序语言的<code>指针类型</code>来表示.</p></blockquote><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Snipaste_2021-09-08_13-59-48.png"></p><h3 id="数据类型和抽象数据类型"><a href="#数据类型和抽象数据类型" class="headerlink" title="数据类型和抽象数据类型"></a>数据类型和抽象数据类型</h3><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>　　<code>数据类型</code>是一个值的集合和定义在这个值上的一系列操作的总称.</p><h4 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h4><p>　　<code>抽象数据类型(ADT)</code>,是指一个<code>数学模型</code>以及定义在该模型上的一组操作.</p><blockquote><p>　　抽象数据类型的定义<strong>仅取决于它的一组<code>逻辑特性</code></strong>.于其在计算机内如何表示和实现无关,即无论其内部结构如何变化,只要其数学特性不变,都不影响其外部使用.</p><p>　　**<code>抽象</code>**意思就是“不具体”,即描述数据类型的方法不依赖于具体实现方式,而在于其数学抽象特性.</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">ADT定义格式:ADT抽象数据类型名&#123;数据对象:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>数据对象的定义</span><span class="token punctuation">></span></span>;数据关系:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>数据关系的定义</span><span class="token punctuation">></span></span>;基本操作:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>基本操作的定义</span><span class="token punctuation">></span></span>;&#125;ADT抽象数据类型名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　数据对象和数据关系的定义采用数学符号和自然语言描述.</p><p>　　基本操作的定义格式为:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">基本操作名(参数表)初始条件:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>初始条件描述</span><span class="token punctuation">></span></span>操作结果:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>操作结果描述</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>　　基本操作有两种参数:<code>赋值参数</code>为操作提供输入值;<code>引用参数(以&amp;开头)</code>,除提供输入值外,还将返回操作结果.”初始条件”描述了操作执行之前的数据结构和参数应该满足的条件(若初始条件为控,则省略),”操作结果”说明了操作正常完成后,数据结构的变化和应返回的结果.</p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/IMG_20210908_193722.jpg" alt="抽象数据类型定义示例"></p><h4 id="抽象数据类型的表现与实现"><a href="#抽象数据类型的表现与实现" class="headerlink" title="抽象数据类型的表现与实现"></a>抽象数据类型的表现与实现</h4><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Snipaste_2021-09-13_15-17-30.png"></p><blockquote><p>预定义常及类型:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//函数结果状态代码</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span>  <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span>  <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OK</span>  <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ERROR</span>  <span class="token expression"><span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OVERFLOW</span>  <span class="token expression"><span class="token operator">-</span><span class="token number">2</span></span></span><span class="token comment">//Status 是用来作为函数返回值的类型,其值为函数结果状态代码</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p> 数据结构的表示(存储结构)用类型定义(typedef)描述;数据元素类型约定为ElemType,由用户自行定义;</p></blockquote><blockquote><p>基本操作的算法都用如下格式的函数来描述:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">函数类型 函数名 <span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//算法说明</span>算法语句<span class="token punctuation">&#125;</span><span class="token operator">/</span>函数名    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>　　由n<code>(n≥0)</code>个数据元<code>素特性相同的元素</code>构成的有限序列称为线性表.其中当n=0时称为空表.</p><p>对于非空线性表或线性结构,有以下特点:</p><ul><li><p>存在唯一一个被称为“第一个”和唯一一个“最后一个”的元素.</p></li><li><p>除第一个元素之外,其他元素有且仅有一个前驱.</p></li><li><p>除最后一个元素之外,其他数据元素有且仅有一个后继.</p></li></ul><h3 id="线性表的抽象数据类型定义"><a href="#线性表的抽象数据类型定义" class="headerlink" title="线性表的抽象数据类型定义"></a>线性表的抽象数据类型定义</h3><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%9E%8B%E5%AE%9A%E4%B9%89.png"></p><h3 id="线性表的顺序表示和实现"><a href="#线性表的顺序表示和实现" class="headerlink" title="线性表的顺序表示和实现"></a>线性表的顺序表示和实现</h3><h4 id="线性表的顺序存储表示"><a href="#线性表的顺序存储表示" class="headerlink" title="线性表的顺序存储表示"></a>线性表的顺序存储表示</h4><p>　　线性表的顺序表示指的是用一组<code>连续的存储单元</code>依次存储线性表的数据元素,也称为线性表的顺序存储结构或顺序映像.称这种存储结构的线性表为<code>顺序表</code>.</p><p>　　特点:逻辑上相邻的数据元素,其物理次序也是相邻的.</p><p>　　假设线性表每个元素占 <em><strong>l</strong></em> 个存储单元,所以第 i 个数据元素 a<sub>i</sub> 的存储位置为:</p><p>　　　　　　　　　　　　LOC(a<sub>i</sub>) = LOC(a<sub>1</sub>)+ (i-1)*l</p><p>　　只要确定了存储线性表的起始位置,线性表中的任意元素都可以随机存取(使用数组下标),所以线性表的顺序存储结构是一种<code>随机存取</code>的数据结构.</p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%A4%BA%E6%84%8F%E5%9B%BE.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//顺序表存储结构</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>ElemType <span class="token operator">*</span> elem<span class="token punctuation">;</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>元素类型定义中的ElemType数据类型是为了描述统一而定的,在实际应用中,可根据实际具体需求来定义,既可以是int, float,char等基本数据类型,也可以是构造数据类型,如struct结构体类型.</li></ul><blockquote><p>例:用顺序表存储稀疏多项式</p><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">100</span></span><span class="token comment">//顺序表最大长度</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token comment">//多项式非零项定义</span><span class="token keyword">float</span> coef<span class="token punctuation">;</span><span class="token comment">//系数</span><span class="token keyword">int</span> expn<span class="token punctuation">;</span><span class="token comment">//指数</span><span class="token punctuation">&#125;</span>Polunomial<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>Polynomial <span class="token operator">*</span>elem<span class="token punctuation">;</span><span class="token comment">//存储空间的基地址</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token comment">//顺序表当前长度;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//将此顺序表存储结构定义为SqList类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述定义后,可以通过以下变量定义语句将L定义为SqList类型的变量.</p><pre class="line-numbers language-none"><code class="language-none">SqList L;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并通过<code>L.elem[i-1]</code>来访问表中第 i 个数据元素.</p></blockquote><h4 id="顺序表基本操作的实现"><a href="#顺序表基本操作的实现" class="headerlink" title="顺序表基本操作的实现"></a>顺序表基本操作的实现</h4><blockquote><ul><li><p>初始化</p><p>构造一个空的顺序表</p></li></ul><p>算法思路:</p><ol><li>为顺序表<code>动态分配</code>一个空间,使elem指向这段空间的基地址.</li><li>将表的当前长度设为0.</li></ol><p>算法实现:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//顺序表 存储结构 定义</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>ElemType <span class="token operator">*</span> elem<span class="token punctuation">;</span><span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>SqList<span class="token punctuation">;</span><span class="token comment">//通过变量定义顺序表 L</span>SqList L<span class="token punctuation">;</span><span class="token comment">//初始化顺序表 L 算法实现</span>Status <span class="token function">InintList</span> <span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>L<span class="token punctuation">.</span>elem <span class="token operator">=</span> new ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//为顺序表分配一个大小为MIXSIZE的数组空间</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token function">exit</span> <span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//存储分配失败则退出</span>L<span class="token punctuation">.</span>Length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//将表长度设为 0</span><span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>取值</p><p>获取顺序表中的第 i 个元素的值.可以直接通过数组下标定位到,elem[i-/‘;;991]数组单元中存储的第 i 个元素.</p></li></ul><p>算法思路:</p><ol><li>判断序号 i 是否合理(1 ≤ i ≤ L.length),若为否,返回ERROR.</li><li>i 合理,将第 i 个元素赋值给参数,并返回.</li></ol><p>算法实现:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>lenght<span class="token punctuation">)</span><span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>e<span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>查找</p><p>根据指定元素e,查找顺序表中第 1 个与e相等的元素,若查找成功,则返回该元素再表中的位置序号,若查找失败,则返回 0.</p></li></ul><p>算法思路:</p><ol><li>从第 1 个元素起依次比较,若找到与e相等的元素L.elem[i],则返回序号i+1.</li><li>若查找失败则返回0;</li></ol><p>算法实现:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> LocatElem <span class="token punctuation">&#123;</span>SqList L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>插入</p><p>在表的第 i 个为位置插入一个新的数据元素 e ,使长度为 n 的线性表变为 n+1 的线性表.</p></li></ul><p>算法思路:</p><ol><li>判断插入位置是否合法(1 ≤ i ≤ n+1 ), 若不合法则返回ERROR.</li><li>判断顺序表的存储空间是否已满,若满则返回ERROR.</li><li>将第 n 个至 i 个位置之间的元素依次向后移动一个位置</li><li>在第 i 个位置插入 e .</li><li>表长 L.length + 1.</li></ol><p>算法实现:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListInsert</span> <span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment">//检测 i 是否合法</span><span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> MAXSIZE<span class="token punctuation">)</span><span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token comment">//当前存储空间已满</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>emem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//插入位置及其以后元素后移</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span><span class="token comment">//将 e 插入第 i 个位置</span><span class="token operator">++</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//表长加1</span><span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>时间复杂度为O(n).</p></blockquote><ul><li><p>删除</p><p>将表中第 i 个元素删除,将长度为 n 的表变为长度为 n-1 的表</p></li></ul><p>算法思路:</p><ol><li>判断删除位置 i 是否合法(1 ≤ i ≤ n ),若不合法返回 ERROR.</li><li>将第 i+1 个至 n个元素依次向前移动一个位置.</li><li>表长 (L.length–).</li></ol><p>算法实现:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListDelete</span> <span class="token punctuation">(</span>Sqlist <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>i<span class="token operator">></span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> ERROR<span class="token punctuation">;</span><span class="token comment">//i值不合法</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//被删除元素之后元素前移</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">--</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment">//表长减 1</span><span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>时间复杂度为O(n).</p></blockquote></blockquote><h3 id="顺序表链式表示和实现"><a href="#顺序表链式表示和实现" class="headerlink" title="顺序表链式表示和实现"></a>顺序表链式表示和实现</h3><h4 id="单链表的定义和表示"><a href="#单链表的定义和表示" class="headerlink" title="单链表的定义和表示"></a>单链表的定义和表示</h4><p>线性表链式存储结构:</p><p>　　用一组任意的存储单元存储线性表的数据元素(这组存储单元不需要连续),所以每个结点(node)由两部分组成,包含两个域: 存储数据元素信息的<code>数据域</code>和存储后继存储位置(后继结点)的<code>指针域</code>.n 个结点( 1 ≤ i ≤ n )链结成的一个链表即称为线性表.又因为此链表的每个结点中只包含一个指针域,故又称为线性链表或单链表.</p><p>　　根据链表结点所包含的指针个数,指针指向和指针的连接方式,可将链表分为:</p><p>　　实现线性表的链式存储结构:<code>单链表</code>,<code>循环链表</code>,<code>双向链表</code>;</p><p>　　实现树和图的非线性存储结构:<code>二叉链表</code>,<code>十字链表</code>,<code>邻链表</code>,<code>邻接多重链表</code>.</p><p>单链表中结点的定义可由C语言中的“结构指针来描述”</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span>ElemType data<span class="token punctuation">;</span><span class="token comment">//数据域</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span> <span class="token comment">//指针域</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img.cantider.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/Snipaste_2021-10-31_11-10-27.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础</title>
      <link href="/2021/08/16/C++%E5%9F%BA%E7%A1%80/"/>
      <url>/2021/08/16/C++%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="变量和基本内容"><a href="#变量和基本内容" class="headerlink" title="变量和基本内容"></a>变量和基本内容</h2><h3 id="C-基本内置类型"><a href="#C-基本内置类型" class="headerlink" title="C++基本内置类型"></a>C++基本内置类型</h3><blockquote><p> C++定义了一套含有<code>算术类型</code>和<code>空类型</code>在内的基本数据类型.</p><blockquote><p>算数类型: 字符, 整型数, 布尔值 和 浮点数</p><p>空类型: 空类型不对应具体值,如当函数不返回任何值的时空类型作为返回类型.</p></blockquote></blockquote><h4 id="算术类型"><a href="#算术类型" class="headerlink" title="算术类型"></a>算术类型</h4><p>算数类型分为两类: 整形(包括字符,整型数和布尔值) 和 浮点型</p><table><thead><tr><th>类型</th><th>含义</th><th>最小尺寸</th></tr></thead><tbody><tr><td><div style=width:150pt>int</div></td><td><div style=width:150pt>整型</div></td><td><div style=width:200pt>16bit</div></td></tr><tr><td>long</td><td>长整型</td><td>32bit</td></tr><tr><td>long long</td><td>长整型</td><td>64bit</td></tr><tr><td>float</td><td>单精度浮点数</td><td>6位有效数字</td></tr><tr><td>double</td><td>双精度浮点数</td><td>10位有效数字</td></tr><tr><td>long double</td><td>拓展精度浮点数</td><td>10位有效数字</td></tr><tr><td>bool</td><td>布尔类型</td><td>未定义</td></tr><tr><td>short</td><td>短整型</td><td>16bit</td></tr><tr><td>char</td><td>字符</td><td>8bit</td></tr><tr><td>wchar_t</td><td>宽字符</td><td>16bit</td></tr><tr><td>char16_t</td><td>Unicode字符</td><td>16bit</td></tr><tr><td>char32_t</td><td>Unicode字符</td><td>32bit</td></tr></tbody></table><p>算术类型所占内存的大小在不同类型的机器上有所差别,上表展示了C++所规定的最小值,同时允许编译器赋予这些类型更大的尺寸.</p><p><code>bool型的取值是 真(true) 或 假(false)</code></p><p>除去布尔型和拓展的字符外,其他整型可以划分为<code>signed(有符号的)</code>和<code>unsigned(无符号的)</code>.<br>字符型被分为三种: <code>char</code>, <code>signed char</code>, <code>unsigned char</code>; char类型的具体表现方式只有两种,signed char和unsigned char,而char实际上表现为二者中的一种,具体表现方式由编译器决定.</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//eg:</span><span class="token keyword">bool</span> b <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token comment">//b的值为真</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token comment">//i的值为1</span>i <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token comment">//i的值为3</span><span class="token keyword">double</span> pi <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">//pi的值为3.0</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//c的值为255(假设char占8bit)</span><span class="token keyword">signed</span> <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span><span class="token comment">//c的值是未定义的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>切勿混用signed和unsigned,如果同一个表达式运算结果为负值,则会自动转换为无符号类型.</p></blockquote><h4 id="字面值常量"><a href="#字面值常量" class="headerlink" title="字面值常量"></a>字面值常量</h4><blockquote><p>整型和浮点型:</p><blockquote><p>整型:     字面值数据类型: int long long long等,十进制  八进制(O)  十六进制(Ox)<br>浮点型: 字面值数据类型: double        </p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++】std::是什么?</title>
      <link href="/2021/08/09/std%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
      <url>/2021/08/09/std%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="【C＋＋】std：：是什么？"><a href="#【C＋＋】std：：是什么？" class="headerlink" title="【Ｃ＋＋】std：：是什么？"></a>【Ｃ＋＋】std：：是什么？</h2><p>引例：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;int main()&#123;    std::cout&lt;&lt;&quot;我喜欢C++&quot;;&#x2F;&#x2F;输出一句话    std::cout&lt;&lt;std::endl;&#x2F;&#x2F;换行    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.std是什么？</p><blockquote><p>​    <em>std::  是个名称空间标示符，C++标准库中的函数或者对象都是在命名空间std中定义的，所以我们要使用标准函数库中的函数或对象都要使用std来限定。</em></p><blockquote><p>​     <strong>对象count是标准函数库所提供的对象，而标准库在名字空间中被指定为std，所以在使用cout的时候要加上std：：。这样编译器就会明白我们调用的cout是名字空间std中的cout。</strong>　　　　　　　　　　　　　</p></blockquote></blockquote><p>2.为什么将cout放到名字空间std中？</p><blockquote><p>是因为像cout这样的对象在实际操作中或许会有好几个，比如说你自己也可能会不小心定义了一个对象叫cout，那么这两个cout对象就会产生冲突。</p></blockquote><p>3.std都是什么时候使用？</p><blockquote><p>  一般来说，std都是要调用C++标准库时，要写上std；</p><p>  使用非标准库文件iostream.h，不用写。</p></blockquote><p>比如上面引例这样改写就不需要std：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream.h&gt;int main()&#123;    cout&lt;&lt;&quot;我喜欢C++&quot;;&#x2F;&#x2F;输出一句话    cout&lt;&lt;endl;&#x2F;&#x2F;换行    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然还有一种方法：</p><p>在main函数的上面使用了两行语句：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using std::cout;using std::endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>那么cout和endl前面就不需要std：：</p><p>比如这样改写引例：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using std::cout;using std::endl;int main()&#123;    cout&lt;&lt;&quot;我喜欢C++&quot;;&#x2F;&#x2F;输出一句话    cout&lt;&lt;endl;&#x2F;&#x2F;换行    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实还有种更简便的方法，就是直接使用<code>using namespace std</code>来代替using std::cout和using std::endl。</p><p>using namespace std 告诉编辑器我们将要使用空间std中的函数或者对象。</p><p>所以cout和endl前面不用注明它们是std这个名字空间中的cout和endl。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main()&#123;    cout&lt;&lt;&quot;我喜欢C++&quot;;&#x2F;&#x2F;输出一句话    cout&lt;&lt;endl;&#x2F;&#x2F;换行    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识C++</title>
      <link href="/2021/08/09/%E5%88%9D%E8%AF%86C++/"/>
      <url>/2021/08/09/%E5%88%9D%E8%AF%86C++/</url>
      
        <content type="html"><![CDATA[<h2 id="【C-】输入输出"><a href="#【C-】输入输出" class="headerlink" title="【C++】输入输出"></a>【C++】输入输出</h2><p>　　<code>C++</code> 使用一个标准库来提供IO机制.最常见的为<code>iostream</code>[“流”(stream)表达的是,随时间变化,字符顺序生成或者消耗]</p><p>　　<code>iostream</code>库包含两个基础类型<code>istream</code>和<code>ostream</code>分别表示 “输入流”和 “输出流”</p><p>标准库定义了4个IO对象,<code>标准输入</code>—–<code>cin</code>,<code>标准输出</code>—–<code>cout</code>;<code>cerr</code>输出警告和错误信息,<code>clog</code>输出其他一般信息.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>count <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter two numbers:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl <span class="token punctuation">;</span><span class="token keyword">int</span> V1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> v2<span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> v1 <span class="token operator">>></span> v2 <span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span><span class="token string">"The sum of "</span><span class="token operator">&lt;&lt;</span> v1 <span class="token operator">&lt;&lt;</span><span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> v2  <span class="token operator">&lt;&lt;</span> <span class="token string">"is"</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">+</span> v2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl <span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　<code>&lt;iostream&gt;</code> 头文件(header)</p><p>　　<code>输出运算符 &quot;&lt;&lt;&quot;</code>: 在标准输出上打印信息<br>“&lt;&lt;”运算符接受两个运算对象,其左侧必须是一个 ostream(输出流) 对象,右侧为需要打印的值.此运算符将给定值(右侧)写入到给定的 ostream 中.即运算结果为写入给定值的 ostream 对象</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>count <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter two numbers:"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>end1 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>　　在这条语句中每个运算符的左侧运算对象都是相同的,也就是 <code>std::cout</code> .</p><p>　　<code>endl</code>:操纵符,具体效果是结束当前行并将与设备关联的缓冲区中的内容刷到设备中.</p><p>　　前缀<code>std::</code>指出名字<code>cout</code>和<code>endl</code>是定义在名为std的<code>命名空间</code>中的,可以避免使用苦衷相同名字导致的冲突,通过<code>作用运算符&quot;::&quot;</code> 来指出我们想使用的是定义在命名空间std中的名字.</p><p>　　<code>输入运算符&quot;&gt;&gt;&quot;</code>其左侧为一个istream(输入流)运算对象,从给定的istream读入数据,并存入给定对象中.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> v1 <span class="token operator">>></span> v2 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="【C-】循环控制"><a href="#【C-】循环控制" class="headerlink" title="【C++】循环控制"></a>【C++】循环控制</h2><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句:"></a>while语句:</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">while(条件)&#123;循环体;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句:"></a>for语句:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化语句<span class="token punctuation">;</span>循环条件<span class="token punctuation">;</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>循环体<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句:"></a>if-else语句:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取数量不定的输入数据"><a href="#读取数量不定的输入数据" class="headerlink" title="读取数量不定的输入数据"></a>读取数量不定的输入数据</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> value<span class="token punctuation">)</span>sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Sum is :"</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>　　此表达式<code>while (std::cin &gt;&gt; value)</code>从标准输入读入一个数,保存在<code>value</code>之中,然后返回左侧运算对象,也就是 <code>std::cin</code> ,因此,循环条件检测的就是 <code>std::cin</code>,<strong>如果我们使用一个<code>istream</code>对象做为条件时,检测的就是流的状态.如果流是有效的,即未遇见错误,那么检测成功,循环继续;如果遇到EOF或者遇到一个无效的输入时,istream会变得无效,则循环条件为假,循环结束.</strong></p><blockquote><p>结束符的输入:<br>                Windows系统:Ctrl+Z,然后Enter.<br>                UNIX系统: Ctrl+D.</p></blockquote></blockquote><h2 id="【C-】类-class-简介"><a href="#【C-】类-class-简介" class="headerlink" title="【C++】类(class)简介"></a>【C++】类(class)简介</h2><p><code>* 什么是类?</code></p><p><code>* 再何处如何定义?</code></p><p><code>* 支持什么操作?</code></p><p>　　类是 C++ 的核心特性，通常被称为用户定义的类型。类用于指定对象的形式，它包含了数据表示法和用于处理数据的方法。类中的数据和方法称为类的<code>成员</code>。类中的数据和方法称为类的成员。函数在一个类中被称为类的成员。</p><p>　　定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但它定义了类的名称意味着什么，也就是说，<strong>它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">classname</span><span class="token punctuation">&#123;</span><span class="token comment">//关键词 class</span>访问修饰符<span class="token operator">:</span><span class="token punctuation">(</span>如<span class="token operator">:</span> <span class="token keyword">public</span><span class="token punctuation">,</span><span class="token keyword">private</span><span class="token punctuation">,</span><span class="token keyword">protected</span><span class="token punctuation">)</span>变量<span class="token punctuation">;</span>函数<span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>eg<span class="token operator">:</span><span class="token keyword">class</span> <span class="token class-name">Box</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span><span class="token operator">:</span>      <span class="token keyword">double</span> length<span class="token punctuation">;</span>   <span class="token comment">// 长度</span>      <span class="token keyword">double</span> breadth<span class="token punctuation">;</span>  <span class="token comment">// 宽度</span>      <span class="token keyword">double</span> height<span class="token punctuation">;</span>   <span class="token comment">// 高度</span>      <span class="token comment">// 成员函数声明</span>      <span class="token keyword">double</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span> <span class="token keyword">double</span> len<span class="token punctuation">,</span> <span class="token keyword">double</span> bre<span class="token punctuation">,</span> <span class="token keyword">double</span> hei <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数:"></a>成员函数:</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Sales_item.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Sales_item item1<span class="token punctuation">,</span> item2<span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">>></span> item1 <span class="token operator">>></span> item2<span class="token punctuation">;</span><span class="token comment">//首先检查 item1 和 item2 是否表示同一本书</span><span class="token keyword">if</span> <span class="token punctuation">(</span>item1<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> item2<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> item1 <span class="token operator">+</span> item2 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span>cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"Data must refer to same ISBN"</span>   <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　<code>if (item1.isbn() == item2.isbn())</code>中调用了名为 isbn  的成员函数,成员函数时定义在类中的函数,也被称为方法.</p><p>　　通常使用一个类的对象的名义来访问成员函数,如<code>item1.isbn()</code>表示我们调用了名为 item1 的对象(类类型)的isbn成员,其中<code>点运算符&quot;.&quot;</code>左侧为“类类型”的对象,右侧为该类型的一个成员名,运算结果为指定的成员.而<code>调用运算符&quot;()&quot;</code>用来调用一个函数,其中()里面防止实参列表.　　　　　　　　　　　　　　　　　<del><code>讲 的 是 什 么 玩 意👿</code></del></p><p>　　</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yooou</title>
      <link href="/2021/07/02/Yooou/"/>
      <url>/2021/07/02/Yooou/</url>
      
        <content type="html"><![CDATA[<p>　　当梦境被打破时,在虚幻与现实之间所蛰伏着的那强大的情绪,就像洪水猛兽一般冲上心头,其中对你的想念不弱半分于我对你那炽热永恒的爱.</p>]]></content>
      
      
      <categories>
          
          <category> 有关你我 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 你 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C_数组与指针</title>
      <link href="/2021/05/03/C_%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>/2021/05/03/C_%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h2><p>　　数组由三部分构成 <code>数组类型</code>  <code>数组名称</code> <code>数组大小[]</code> ,数组类型就是数组所能存储的数据类型,<code>[]</code>中的数字表明数组中元素个数,通过数组下标对数组元素进行访问,数组元素的编号从<code>0</code>开始,最后一个元素的下标为<code>数组大小-1</code>.</p><p><code>const声明</code>:在数组类型前加上 <code>const</code>,把数组设置为只读类型.</p><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><p>　　使用数组前必须先初始化,必须先赋予其初值,如果不初始化数组,数组元组中存储的是垃圾值 (<em>内存中当前位置所存储的值</em>)</p><h4 id="数组初始化的几种形式"><a href="#数组初始化的几种形式" class="headerlink" title="数组初始化的几种形式:"></a>数组初始化的几种形式:</h4><blockquote><ul><li><input disabled="" type="checkbox"> 初始化列表中项数与数组大小一致:</li></ul><p>int a [10]={0,1,2,3,4,5,6,7,8,9}<br>用花括号<code>&#123;&#125;</code>括起来,用<code>,</code>分隔值列表</p></blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 初始化列表中项数与数组大小不一致:</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">000</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">输出结果<span class="token operator">:</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token number">000</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token number">111</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　　当初始化列表中的值少于数组元素个数时,编译器会把剩余的元素都初始化为<code>0</code>.即部分初始化数组,剩余的元素就会被初始化为<code>0</code>.<br>　　当初始化列表中的值多于数组元素的个数,则会被视为<code>错误</code>.</p></blockquote><blockquote><ul><li><p><input disabled="" type="checkbox">  初始化时忽略<code>[]</code>中的数字</p><p>如果初始化数组时忽略<code>[]</code>中的数组,编译器会根据初始化列表中的项数来确定数组的大小</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 指定初始化[C99]</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//传统初始化:</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//如若想只初始化某一项,就必须将之前的全部初始化</span><span class="token comment">//指定初始化:</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">555</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//把a[5]初始化为了555</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与一般初始化相同,在初始化过一个元素后,未初始化的元素都会被设置为<code>0</code></p><p><em><strong>特殊的:</strong></em><br>　　如果再次初始化指定元素,那么最后的初始化回取代之前的初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">555</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">111</span><span class="token punctuation">&#125;</span><span class="token comment">/*输出结果a[0]0a[1]111a[2]2a[3]3a[4]4a[5]555</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Main NO Mian</title>
      <link href="/2021/03/27/main%20NO%20mian/"/>
      <url>/2021/03/27/main%20NO%20mian/</url>
      
        <content type="html"><![CDATA[<h2 id="PTA题目大赏"><a href="#PTA题目大赏" class="headerlink" title="PTA题目大赏"></a>PTA题目大赏</h2><h3 id="统计素数并求和"><a href="#统计素数并求和" class="headerlink" title="统计素数并求和"></a>统计素数并求和</h3><blockquote><p>输入格式:<br>　　输入在一行中给出两个正整数M和N（1≤M≤N≤500）。  </p></blockquote><blockquote><p>输出格式:<br>　　在一行中顺序输出M和N区间内素数的个数以及它们的和，数字间以空格分隔。  </p></blockquote><blockquote><p>输入样例:<br><code>10 31</code>  </p></blockquote><blockquote><p>输出样例:<br><code>1 143</code> </p></blockquote>   <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>num<span class="token punctuation">,</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> M<span class="token punctuation">,</span>N<span class="token punctuation">;</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">501</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>num<span class="token operator">&lt;=</span><span class="token number">500</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token comment">//定义并初始化数组,否则有可能出现a[i]!=0</span>        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//标记非素数和和数的 1 为 1</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>M<span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>n<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>m<span class="token operator">=</span>n<span class="token operator">*</span>n<span class="token punctuation">;</span>m<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>m<span class="token operator">+=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>       <span class="token comment">//遍历 2~N 的所有和数,并标记为 1</span>                <span class="token comment">//printf("\n\n\n");</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>M<span class="token punctuation">;</span>M<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>M<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//printf("%d\t",M);</span>                flag<span class="token operator">++</span><span class="token punctuation">;</span>                add<span class="token operator">+=</span>M<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>flag<span class="token punctuation">,</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求幂级数展开的部分和"><a href="#求幂级数展开的部分和" class="headerlink" title="求幂级数展开的部分和"></a>求幂级数展开的部分和</h3><blockquote><p>题目:<br>        已知: 已知函数 e<sup>x</sup>可以展开为幂级数1+x+x<sup>2</sup>/2!+x<sup>3</sup>/3!+⋯+x<sup>k</sup>/k!+⋯。现给定一个实数x，要求利用此幂级数部分和求e<sup>x</sup>的近似值，求和一直继续到最后一项的绝对值小于0.00001。  </p></blockquote><blockquote><p>输入格式:<br>　　输入在一行中给出一个实数 x ∈ [0,5]。　　</p></blockquote><blockquote><p>输出格式:<br>在一行中输出满足条件的幂级数部分和，保留小数点后四位。  </p></blockquote><blockquote><p>输入样例:<br><code>1.2</code>    </p></blockquote><blockquote><p>输出样例:<br><code>3.3201</code>     </p></blockquote>   <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>    <span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> x<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">,</span>add<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> i<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">*</span>num<span class="token punctuation">)</span><span class="token operator">/</span>i<span class="token punctuation">;</span>                <span class="token comment">//每一轮都相当于(x/1)*(x/2)*(x/3)...(x/i)</span>                <span class="token comment">//即就是 (x^i)/(i!)</span>            add<span class="token operator">+=</span>num<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0.00001</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4f"</span><span class="token punctuation">,</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求分数序列前N项和"><a href="#求分数序列前N项和" class="headerlink" title="求分数序列前N项和"></a>求分数序列前N项和</h3><blockquote><p>题目:<br>       计算序列 2/1+32+5/3+8/5+… 的前N项之和。注意该序列从第2项起，每一项的分子是前一项分子与分母的和，分母是前一项的分子。  </p></blockquote><blockquote><p>输入格式:<br>　　输入在一行中给出一个正整数N。</p></blockquote><blockquote><p>输出格式:<br>　　在一行中输出部分和的值，精确到小数点后两位。题目保证计算结果不超过双精度范围。   </p></blockquote><blockquote><p>输入样例:<br>　　<code>20</code>          </p></blockquote><blockquote><p>输出样例:<br>　　<code>32.66</code>   </p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> x<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>                <span class="token comment">//x,y为前一项分子与分母</span>                <span class="token comment">//m,n为后一项分子与分母</span>                <span class="token comment">//则 m=x+y n=x</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span>flag<span class="token punctuation">;</span>    <span class="token keyword">double</span> add<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>flag<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>flag<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        m<span class="token operator">=</span>x<span class="token operator">+</span>y<span class="token punctuation">;</span>  <span class="token comment">//3=1+2</span>        n<span class="token operator">=</span>x<span class="token punctuation">;</span>    <span class="token comment">//2=2</span>        add<span class="token operator">+=</span><span class="token punctuation">(</span>m<span class="token operator">/</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3/2</span>        x<span class="token operator">=</span>m<span class="token punctuation">;</span>    <span class="token comment">//x=3</span>        y<span class="token operator">=</span>n<span class="token punctuation">;</span>    <span class="token comment">//y=2</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2lf"</span><span class="token punctuation">,</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特殊a串数列求和"><a href="#特殊a串数列求和" class="headerlink" title="特殊a串数列求和"></a>特殊a串数列求和</h3><blockquote><p> 题目:<br>　　给定两个均不超过9的正整数a和n，要求编写程序求a+aa+aaa++⋯+aa⋯a（n个a）之和。</p></blockquote><blockquote><p>输入格式:<br>　　输入在一行中给出不超过9的正整数a和n</p></blockquote><blockquote><p>输出格式:<br>　　在一行中按照“s = 对应的和”的格式输出。  </p></blockquote><blockquote><p>输入样例:<br>　　<code>2 3</code>          </p></blockquote><blockquote><p>输出样例:<br>　　<code>s = 246</code>          </p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//注意题目不是指从 a^1~a^n 求和</span>          <span class="token comment">//而是像 1+11+111+....求和</span><span class="token keyword">int</span> a<span class="token punctuation">,</span>n<span class="token punctuation">,</span>add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>flag<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>flag<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   sum<span class="token operator">=</span>sum<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>a<span class="token punctuation">;</span>   add<span class="token operator">+=</span>sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"s = %d"</span><span class="token punctuation">,</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h3><blockquote><p>题目:<br>        水仙花数是指一个<em>N</em>位正整数（<em>N</em>≥3），它的每个位上的数字的<em>N</em>次幂之和等于它本身。例如：153=13+53+33。 本题要求编写程序,计算所有<em>N</em>位水仙花数。  </p></blockquote><blockquote><p>输入格式:<br>        输入在一行中给出一个正整数N(3≤N≤7).</p></blockquote><blockquote><p>输出格式:<br>        按照递增顺序输出所有N位水仙花数,每个数字占一行.</p></blockquote><blockquote><p>输入样例:<br><code>3</code>  </p></blockquote><blockquote><p>输出样例:<br><code>153</code><br><code>370</code><br><code>371</code><br><code>407</code></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> min<span class="token punctuation">,</span>max<span class="token punctuation">;</span>    <span class="token keyword">int</span> flag1<span class="token punctuation">,</span>flag2<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span>add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    min<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    max<span class="token operator">=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>flag1<span class="token operator">=</span>min<span class="token punctuation">;</span>flag1<span class="token operator">&lt;</span>max<span class="token punctuation">;</span>flag1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         num<span class="token operator">=</span>flag1<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>flag2<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>flag2<span class="token operator">&lt;=</span>N<span class="token punctuation">;</span>flag2<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            add<span class="token operator">+=</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>            num<span class="token operator">=</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>add<span class="token operator">==</span>flag1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> flag<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>flag<span class="token operator">&lt;=</span>y<span class="token punctuation">;</span>flag<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a<span class="token operator">*=</span>x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//若调用&lt;math.h>函数库,则当N=7时,会出现运行超时的情况,因为pow()函数是浮点运算,</span><span class="token comment">//且需调用&lt;math.h>函数库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="电文环形解密"><a href="#电文环形解密" class="headerlink" title="* 电文环形解密"></a>* 电文环形解密</h3><blockquote><p>题目:<br>将26个英文字母按顺时针方向排成一个圆环。密钥是一个整数。   </p></blockquote><blockquote><p>加密方法:<br>若密钥 key ≥ 0 ,则从明文字母开始顺时针方向走 |key|步得到秘文字母;<br>若密钥 key &lt; 0 ,则从明文字母开始逆时针方向走 |key|步得到密文字母;</p></blockquote><blockquote><p>输入格式:<br>密钥(任意整数)<br>密文电文(以回车结束)</p></blockquote><blockquote><p>输出格式:<br>明文电文(以回车结束)</p></blockquote><blockquote><p>输入样例:<br>2<br>K nqxg aqw!</p></blockquote><blockquote><p>输出样例:<br>I love you!</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">char</span> miwen<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   key<span class="token operator">%=</span><span class="token number">26</span><span class="token punctuation">;</span><span class="token comment">//确保密钥在26以内</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token comment">//先读入一字符,然后再判断其是否为字母,所以用 do-while 语句</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>miwen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>miwen<span class="token operator">>=</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>miwen<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        key <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">?</span> miwen<span class="token operator">=</span><span class="token string">'a'</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>miwen<span class="token operator">-</span><span class="token string">'a'</span><span class="token operator">-</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span>        <span class="token operator">:</span>       <span class="token punctuation">(</span>miwen<span class="token operator">=</span><span class="token string">'z'</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token operator">-</span>miwen<span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>miwen<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用 A ? B : C 语句</span>        <span class="token comment">//如果 key&lt;0, 明文转密文为逆时针,则密文转明文为顺时针</span>        <span class="token comment">//则计算 '当前字母' - 'a' 的距离,再加上key的距离,即可得到明文字母距离a的距离</span>        <span class="token comment">//如果 key>0, 明文转密文为顺时针,则密文转明文为逆时针</span>        <span class="token comment">//则计算 'z' - '当前字母' 的距离,再加上key的距离,即可得到明文字母距离z的距离</span>        <span class="token comment">//为什么顺时针用 'a'+距离;而逆时针用 'z'-距离?</span>        <span class="token comment">//原因:顺时针从'a'开始确保不会溢出26,逆时针同理</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>miwen<span class="token operator">>=</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>miwen<span class="token operator">&lt;=</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        key <span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">?</span> miwen<span class="token operator">=</span><span class="token string">'A'</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>miwen<span class="token operator">-</span><span class="token string">'A'</span><span class="token operator">-</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span>        <span class="token operator">:</span>       <span class="token punctuation">(</span>miwen<span class="token operator">=</span><span class="token string">'Z'</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token operator">-</span>miwen<span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>miwen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>miwen<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>miwen <span class="token operator">!=</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="星期几"><a href="#星期几" class="headerlink" title="星期几?"></a>星期几?</h3><blockquote><p>给定一个1900 ~ 2100 范围内日期,输出这个日期是星期几.<br>(1900/01/01为星期一)</p></blockquote><blockquote><p>输入格式:<br>输入数据的格式为YYYY/MM/DD组成,具体参见sample intput.</p></blockquote><blockquote><p>输出格式:<br>对于每组输入数据,输出一行,表示该日期是星期几英文单词.</p></blockquote><blockquote><p>输入样例:<br>2011/11/17</p></blockquote><blockquote><p>输出样例:<br>thursday</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">int</span> day<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum<span class="token punctuation">,</span>add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flag<span class="token punctuation">;</span>         <span class="token comment">//算出现在是今年第几天  </span>    day<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">28</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>    day<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d/%d/%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>       sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>             <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            sum<span class="token operator">+=</span>day<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>       sum<span class="token operator">+=</span>c<span class="token punctuation">;</span>         <span class="token comment">//先不考虑闰年今天是当年第几天</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> b<span class="token operator">>=</span><span class="token number">3</span><span class="token punctuation">)</span>            sum<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment">//判断是否闰年,且月份大于 2,若是则在总天数+1</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>flag<span class="token operator">=</span><span class="token number">1900</span><span class="token punctuation">;</span>flag<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>flag<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            add<span class="token operator">+=</span><span class="token number">365</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>flag<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> flag<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 add<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token comment">//遍历1900~到当前年份每一年, 先+365,如若为闰年++  </span>        <span class="token punctuation">&#125;</span>          add<span class="token operator">+=</span>sum<span class="token punctuation">;</span>    <span class="token comment">//计算出总天数,对7取余,即可得到星期几</span>          <span class="token keyword">switch</span><span class="token punctuation">(</span>add<span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"monday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Tuesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Wednesday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"thursday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"friday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"saturday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>              <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sunday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>                 <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找出不是两个数组共有的元素"><a href="#找出不是两个数组共有的元素" class="headerlink" title="* 找出不是两个数组共有的元素"></a>* 找出不是两个数组共有的元素</h3><blockquote><p>给定两个整数数组,本题要求找出不是两者共有的元素.  </p></blockquote><blockquote><p>输入格式:<br>输入分别在两行中给出两个整型数组,每日行先给出正整数N(≤20),随后是N个整数,其间以空格分隔.</p></blockquote><blockquote><p>输出格式:<br>在一行中按照数字给出的顺序输出不是两个数组共有的元素,数字间以空格分隔,但行末不得有多余空格.题目保证至少存在一个这样的数字，同一数字不重复输出．</p></blockquote><blockquote><p>输入样例:<br>10 3 -5 2 8 0 3 5 -15 9 100<br>11 6 4 8 2 6 -5 9 0 100 8 1</p></blockquote><blockquote><p>输出样例:<br>3 5 -15 6 4 1</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>c<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>c<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组个最小数"><a href="#组个最小数" class="headerlink" title="组个最小数"></a>组个最小数</h3><blockquote><p>给定数字0-9各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能（注意0不能做首位）。例如：给定两个0，两个1，三个5，一个8，我们得到的最小的数就是10015558。现给定数字，请编写程序输出能够组成的最小的数。</p></blockquote><blockquote><p>输入格式:<br>输入在一行中给出10 个非负数,顺序表示我们拥有数字0、数字1、……数字9的个数。整数间用一个空格分隔。10个数字的总个数不超过50，且至少拥有1个非0的数字。  </p></blockquote><blockquote><p>输出格式:<br>在一行中输出能够组成的最小的数</p></blockquote><blockquote><p>输入样例:<br>2 2 0 0 0 3 0 0 1 0</p></blockquote><blockquote><p>输出样例:<br>10015558</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>t<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//输出第一个非0数,并将其总数减1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>t<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>t<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//从数组0开始,依次按个数输出</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><blockquote><p>给定一个<em>n</em>×<em>n</em>的方阵，本题要求计算该矩阵<strong>除副对角线、最后一列和最后一行</strong>以外的<strong>所有元素之和</strong>。副对角线为从矩阵的右上角至左下角的连线</p></blockquote><blockquote><p>输入格式:<br>输入第一行给出正整数<em>n</em>（1&lt;<em>n</em>≤10）；随后<em>n</em>行，每行给出<em>n</em>个整数，其间以空格分隔。</p></blockquote><blockquote><p>输出格式:<br>在一行中给出该矩阵除副对角线、最后一列和最后一行以外的所有元素之和。</p></blockquote><blockquote><p>输入样例:<br>4<br>2 3 4 1<br>5 6 1 1<br>7 1 8 1<br>1 1 1 1</p></blockquote><blockquote><p>输出样例:<br>35</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>add<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//最后一行线归0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//最后一列归0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//副对角线归0</span>   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           add<span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//从[0][0]到[n-1][n-1]求和</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="找鞍点"><a href="#找鞍点" class="headerlink" title="找鞍点"></a>找鞍点</h3><blockquote><p>一个矩阵元素的“鞍点”是指该位置上的元素值在该行上最大、在该列上最小。本题要求编写程序，求一个给定的<em>n</em>阶方阵的鞍点。</p></blockquote><blockquote><p>输入格式:<br>输入第一行给出一个正整数<em>n</em>（1≤<em>n</em>≤6）。随后<em>n</em>行，每行给出<em>n</em>个整数，其间以空格分隔。</p></blockquote><blockquote><p>输出格式:<br>输出在一行中按照“行下标 列下标”（下标从0开始）的格式输出鞍点的位置。如果鞍点不存在，则输出“NONE”。题目保证给出的矩阵至多存在一个鞍点。</p></blockquote><blockquote><p>输入样例:<br>4<br>1 7 4 1<br>4 8 3 6<br>1 6 1 2<br>0 7 8 9</p></blockquote><blockquote><p>输出样例:</p><p>2 1</p></blockquote><blockquote><p>输入样例:<br>2<br>1 7<br>4 1</p></blockquote><blockquote><p>输出样例:<br>NONE</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//MINE</span><span class="token comment">//鞍点:行上最大、列上最小</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">,</span>T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    n<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        max<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token operator">&lt;=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               max<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               num<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>        <span class="token comment">//此时已经找到第 i 行最大值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token operator">&lt;</span>max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    T<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            T<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        T<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NONE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整数拆分"><a href="#整数拆分" class="headerlink" title="* 整数拆分"></a>* 整数拆分</h3><blockquote><p>给定一个整数n，将其无序拆分成最大数为k的拆分数，（n,k不超出100） 要求：所有的拆分方案不重复。 如当n=4,k=4时，一共有5种拆分方案，拆分如下</p><pre class="line-numbers language-none"><code class="language-none">(1)4&#x3D;1+1+1+1(2)4&#x3D;1+1+2(3)4&#x3D;1+3(4)4&#x3D;2+2(5)4&#x3D;4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>输入格式:<br>每一行输入一组整数n,k,遇到键盘结束符^Z或文件结束符EOF时结束输入。</p></blockquote><blockquote><p>输出格式:<br>按行输出每组的拆分方案数.</p></blockquote><blockquote><p>输入样例:<br>4,4<br>5,4</p></blockquote><blockquote><p>输出样例;<br>5<br>6</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span> </span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d, %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token operator">&amp;</span>k<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">EOF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> i <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//这道题不会,纯傻*题目</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="完美的代价"><a href="#完美的代价" class="headerlink" title="* 完美的代价"></a>* 完美的代价</h3><blockquote><p>回文串是一种特殊的字符串，它从左往右读和从右往左读是一样的，有人认为回文串是一种完美的字符串。现在给你一个字符串，它不一定是回文的，请你计算最少的交换次数使得该字符串变成一个回文串。这里的交换指将字符串中两个相邻的字符互换位置。 例如所给的字符串为”mamad”，第一次交换a和d，得到”mamda”，第二次交换m和d，得到”madma”；第三次交换最后面的m和a，得到”madam”。</p></blockquote><blockquote><p>输入格式:<br>第一行是一个整数N(N&lt;=80),表示所给的字符串长度,第二行是所给的字符串,长度为N且只包含小写英文字母.</p></blockquote><blockquote><p>输出格式:<br>如果所给的字符串能经过若干次交换变成会问串,则输出所需的最少交换次数;否则,输出Impossible.</p></blockquote><blockquote><p>输入样例:<br><code>5</code><br><code>mamad</code></p></blockquote><blockquote><p>输出样例:<br><code>3</code></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*    完美的代价：通过交换相邻字符，使原字符串化为回文字符串 。*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>l<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>flat<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>n<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    j<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//利用贪心的思想，将每个遍历的字符找到后面与他相同的然后交换到正确的位置时所需的交换次数</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">>=</span>i<span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//说明没有找到与a[i]相同的字符</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>c<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果n为偶数或者a[i]不是唯一一个单个无相同字符</span>                    flat<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                c<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//n为奇数，将第一个单个的字符a[i]移到中间位置所需的交换次数</span>                sum<span class="token operator">=</span>sum<span class="token operator">+</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span>i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>l<span class="token operator">=</span>k<span class="token punctuation">;</span>l<span class="token operator">&lt;</span>j<span class="token punctuation">;</span>l<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                sum<span class="token operator">=</span>sum<span class="token operator">+</span>j<span class="token operator">-</span>k<span class="token punctuation">;</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flat<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>flat<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组元素的删除"><a href="#数组元素的删除" class="headerlink" title="数组元素的删除"></a>数组元素的删除</h3><blockquote><p>完成数组元素的移动功能：假设数组有n个元素，输入一个数x，把数组的第x个位置的元素删除了，后面的元素依次前进一个位置。 重复若干次这样的删除，得到最后的结果。</p></blockquote><blockquote><p>输入格式:<br>第一行包括一个整数n（1&lt;=n&lt;=100），表示数组元素的个数。 第二行输入n个数组元素，均为整数，用空格隔开。 第三行输入一个数k（1&lt;=k&lt;=100），表示要进行k次删除。 接下来k行，每行一个数x，表示要删除第x个元素。</p></blockquote><blockquote><p>输出格式:<br>输出经过k次删除后的数组,每两个元素之间用空格隔开</p></blockquote><blockquote><p>输入样例:  </p><pre class="line-numbers language-none"><code class="language-none">101 2 3 4 5 6 7 8 9 1043246<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>输出样例:  </p><pre class="line-numbers language-none"><code class="language-none">1 4 5 7 8 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>x<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        n<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>n<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九宫格输入法"><a href="#九宫格输入法" class="headerlink" title="* 九宫格输入法"></a>* 九宫格输入法</h3><blockquote><p>假设有九宫格输入法键盘布局如下:</p><pre class="line-numbers language-none"><code class="language-none">[ 1,.?! ]  [ 2ABC ] [ 3DEF ][ 4GHI  ]  [ 5JKL ] [ 6MNO ][ 7PQRS ]  [ 8TUV ] [ 9WXYZ]           [ 0空  ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：中括号<code>[ ]</code>仅为了表示键盘的分隔，不是输入字符。每个中括号中，位于首位的数字字符即是键盘的按键，按一下即可输入该数字字符。多次按同一个键，则输入的字符依次循环轮流，例如按两次<code>3</code>，则输入<code>D</code>；按5次<code>7</code>，则输入<code>S</code>；按6次<code>2</code>，则输入<code>A</code>。按键<code>0</code>的输入组合是<code>0</code>和<code>空格</code>字符，即按两次<code>0</code>输入空格。</p><p>你需要对于给定的按键组合，给出该组合对应的文本。</p></blockquote><blockquote><p>输入格式:<br>输入在一行中给出数个字符的按键组合（例如 <code>999</code> 表示按3次<code>9</code>），每个字符的按键组合之间用空格间隔，最后一个输入法组合之后以换行结束。输入数据至少包括一个字符的按键组合，且输入总长度不超过500个字符。</p></blockquote><blockquote><p>输出格式:<br>在一行中输出该案件组合对应的文本.</p></blockquote><blockquote><p>输入样例:  </p><pre class="line-numbers language-none"><code class="language-none">22 5555 22 666 00 88 888 7777 4444 666 44<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>输出样例:  </p><pre class="line-numbers language-none"><code class="language-none">ALAN TURING<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;char result(int a,char s)&#123;int array[10][5]&#x3D;&#123;&#123;49,44,46,63,33&#125;,&#x2F;&#x2F;1&#123;50,65,66,67&#125;,&#x2F;&#x2F;2&#123;51,68,69,70&#125;,&#x2F;&#x2F;3&#123;52,71,72,73&#125;,&#x2F;&#x2F;4&#123;53,74,75,76&#125;,&#x2F;&#x2F;5&#123;54,77,78,79&#125;,&#x2F;&#x2F;6&#123;55,80,81,82,83&#125;,&#x2F;&#x2F;7&#123;56,84,85,86&#125;,&#x2F;&#x2F;8&#123;57,87,88,89,90&#125;,&#x2F;&#x2F;9&#123;48,32&#125;&#x2F;&#x2F;0&#125;;if(s&#x3D;&#x3D;&#39;1&#39;||s&#x3D;&#x3D;&#39;7&#39;||s&#x3D;&#x3D;&#39;9&#39;)&#123;while(a&gt;5) a-&#x3D;5;printf(&quot;%c&quot;,array[s-&#39;0&#39;-1][a-1]);&#125;else if(s&#x3D;&#x3D;&#39;0&#39;)&#123;while(a&gt;2) a-&#x3D;2;printf(&quot;%c&quot;,array[9][a-1]);&#125;else&#123;while(a&gt;4) a-&#x3D;4;printf(&quot;%c&quot;,array[s-&#39;0&#39;-1][a-1]);&#125;&#125;int main(void)&#123;char c[500];int i;&#x2F;&#x2F;输入字符串 for(i&#x3D;0;;i++)&#123;scanf(&quot;%c&quot;,&amp;c[i]);if(c[i]&#x3D;&#x3D;&#39;\n&#39;) break;&#125;&#x2F;&#x2F;计算并输出for(i&#x3D;0;c[i]!&#x3D;&#39;\n&#39;;i++)&#123;int show&#x3D;1;for(;c[i]&#x3D;&#x3D;c[i+1];i++)&#123;show++;&#125;result(show,c[i]);if(c[i+1]&#x3D;&#x3D;&#39; &#39;) i++;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="敲笨钟"><a href="#敲笨钟" class="headerlink" title="* 敲笨钟"></a>* 敲笨钟</h3><blockquote><p>微博上有个自称“大笨钟V”的家伙，每天敲钟催促码农们爱惜身体早点睡觉。为了增加敲钟的趣味性，还会糟改几句古诗词。其糟改的方法为：去网上搜寻压“ong”韵的古诗词，把句尾的三个字换成“敲笨钟”。例如唐代诗人李贺有名句曰：“寻章摘句老雕虫，晓月当帘挂玉弓”，其中“虫”（chong）和“弓”（gong）都压了“ong”韵。于是这句诗就被糟改为“寻章摘句老雕虫，晓月当帘敲笨钟”。</p><p>现在给你一大堆古诗词句，要求你写个程序自动将压“ong”韵的句子糟改成“敲笨钟”。</p></blockquote><blockquote><p>输入格式:<br>输入首先在第一行给出一个不超过 20 的正整数 N。随后 N 行，每行用汉语拼音给出一句古诗词，分上下两半句，用逗号 <code>,</code> 分隔，句号 <code>.</code> 结尾。相邻两字的拼音之间用一个空格分隔。题目保证每个字的拼音不超过 6 个字符，每行字符的总长度不超过 100，并且下半句诗至少有 3 个字。</p></blockquote><blockquote><p>输出格式:<br>对每一行诗句，判断其是否压“ong”韵。即上下两句末尾的字都是“ong”结尾。如果是压此韵的，就按题面方法糟改之后输出，输出格式同输入；否则输出 <code>Skipped</code>，即跳过此句。</p></blockquote><blockquote><p>输入样例:  </p><pre class="line-numbers language-none"><code class="language-none">5xun zhang zhai ju lao diao chong, xiao yue dang lian gua yu gong.tian sheng wo cai bi you yong, qian jin san jin huan fu lai.xue zhui rou zhi leng wei rong, an xiao chen jing shu wei long.zuo ye xing chen zuo ye feng, hua lou xi pan gui tang dong.ren xian gui hua luo, ye jing chun shan kong.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><blockquote><p>输出样例:   </p><pre class="line-numbers language-none"><code class="language-none">xun zhang zhai ju lao diao chong, xiao yue dang lian qiao ben zhong.Skippedxue zhui rou zhi leng wei rong, an xiao chen jing qiao ben zhong.SkippedSkipped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"ong,"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> t<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"ong."</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> blank<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> insert<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"qiao ben zhong."</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">32</span><span class="token punctuation">)</span>            <span class="token operator">++</span>blank<span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">','</span><span class="token punctuation">)</span> <span class="token comment">//解决下半句诗只有三个字问题</span>            <span class="token operator">++</span>blank<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>blank<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            j<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token operator">+</span>j<span class="token punctuation">,</span>insert<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> input<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//**此处是重点！！！**</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">gets</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>             <span class="token function">display</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>input<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Skipped\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除重复字符"><a href="#删除重复字符" class="headerlink" title="* 删除重复字符"></a>* 删除重复字符</h3><blockquote><p>本题要求编写程序，将给定字符串去掉重复的字符后，按照字符ASCII码顺序从小到大排序后输出。</p></blockquote><blockquote><p>输入格式:<br>输入是一个以回车结束的非空字符串(少于80个字符)</p></blockquote><blockquote><p>输出格式:<br>输出去重排序后的结果字符串</p></blockquote><blockquote><p>输入样例:  </p><pre class="line-numbers language-none"><code class="language-none">ad2f3adjfeainzzzv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><blockquote><p>输出样例:   </p><pre class="line-numbers language-none"><code class="language-none">23adefijnvz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>longs<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">gets</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">80</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        longs<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>longs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>longs<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                k<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>longs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>longs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            a<span class="token punctuation">[</span>longs<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'\0'</span><span class="token punctuation">;</span>            longs<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>longs<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">putchar</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> PTA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
